# -*- coding:utf-8 -*-

"""
总共有 n 个人和 40 种不同的帽子，帽子编号从 1 到 40 。
给你一个整数列表的列表 hats ，其中 hats[i] 是第 i 个人所有喜欢帽子的列表。
请你给每个人安排一顶他喜欢的帽子，确保每个人戴的帽子跟别人都不一样，并返回方案数。
由于答案可能很大，请返回它对 10^9 + 7 取余后的结果。

示例 1：
输入：hats = [[3,4],[4,5],[5]]
输出：1
解释：给定条件下只有一种方法选择帽子。
第一个人选择帽子 3，第二个人选择帽子 4，最后一个人选择帽子 5。

示例 2：
输入：hats = [[3,5,1],[3,5]]
输出：4
解释：总共有 4 种安排帽子的方法：
(3,5)，(5,3)，(1,3) 和 (1,5)

示例 3：
输入：hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
输出：24
解释：每个人都可以从编号为 1 到 4 的帽子中选。
(1,2,3,4) 4 个帽子的排列方案数为 24 。

示例 4:
输入：hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]
输出：111

提示：
n == hats.length
1 <= n <= 10
1 <= hats[i].length <= 40
1 <= hats[i][j] <= 40
hats[i] 包含一个数字互不相同的整数列表。

链接：https://leetcode-cn.com/problems/number-of-ways-to-wear-different-hats-to-each-other
"""

from typing import List


class Solution:
    def numberWays(self, hats: List[List[int]]) -> int:
        # 状态压缩 dp, 枚举帽子给谁戴, 压缩所有人戴帽子的状态
        # 状态表示: f[i][bits]: 前 i 顶帽子确定了归属, 人戴帽子的状态为 bits 的方案数
        # 状态转移: 第 i 顶帽子不给人戴: f[i][bits] = f[i - 1][bits]
        #           第 i 顶帽子给某个人 j 戴: f[i][bits | (1 << j)] = f[i - 1][bits] (前提: j 喜欢 i, 且 j 没有戴帽子)
        # 初始状态: f[0][0] = 1  没有帽子, 所有人都不戴帽, 方案数: 0

        mod = 10 ** 9 + 7
        n = len(hats)
        lim = 1 << n
        f = [[0] * lim for _ in range(45)]
        f[0][0] = 1

        for i in range(1, 41):  # 尝试分配没一顶帽子
            for s in range(lim):  # 枚举所有可能的状态
                f[i][s] = f[i - 1][s]  # 第 i 顶帽子不给人戴的方案数
                for j in range(n):  # 尝试分配第 i 顶帽子给 j
                    if i in hats[j] and (s >> j) & 1:  # j 喜欢第 i 顶帽子， 给 j 带上了帽子的方案数
                        ps = s & (~(1 << j))  # 上一个状态: j 没有戴帽子， 将第 j 位置为0
                        f[i][s] += f[i - 1][ps]

        return f[40][lim - 1] % mod  # 40 顶帽子, 每个人都有帽子戴的方案数


hats = [[1, 2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24, 25], [2, 5, 16],
        [1, 4, 5, 6, 7, 8, 9, 12, 15, 16, 17, 19, 21, 22, 24, 25], [1, 3, 6, 8, 11, 12, 13, 16, 17, 19, 20, 22, 24, 25],
        [11, 12, 14, 16, 18, 24], [2, 3, 4, 5, 7, 8, 13, 14, 15, 17, 18, 21, 24],
        [1, 2, 6, 7, 10, 11, 13, 14, 16, 18, 19, 21, 23],
        [1, 3, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 23, 24, 25],
        [2, 3, 4, 6, 7, 10, 12, 14, 15, 16, 17, 21, 22, 23, 24, 25]]
s = Solution()
print(s.numberWays(hats))
