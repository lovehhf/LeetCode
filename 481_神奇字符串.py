# -*- coding:utf-8 -*-

__author__ = 'huanghf'

"""
神奇的字符串 S 只包含 '1' 和 '2'，并遵守以下规则：

字符串 S 是神奇的，因为串联字符 '1' 和 '2' 的连续出现次数会生成字符串 S 本身。

字符串 S 的前几个元素如下：S = “1221121221221121122 ......”

如果我们将 S 中连续的 1 和 2 进行分组，它将变成：

1 22 11 2 1 22 1 22 11 2 11 22 ......

并且每个组中 '1' 或 '2' 的出现次数分别是：

1 2 2 1 1 2 1 2 2 1 2 2 ......

你可以看到上面的出现次数就是 S 本身。

给定一个整数 N 作为输入，返回神奇字符串 S 中前 N 个数字中的 '1' 的数目。

注意：N 不会超过 100,000。

示例：

输入：6
输出：3
解释：神奇字符串 S 的前 6 个元素是 “122112”，它包含三个 1，因此返回 3。

1,1
12,1
12,12
  
    i  
1221121221221121122
1221121221221121122
  j

j指示i的重复次数

122112122122112112212112122112112122122112122121121122122112122122112112122121122122112122122112112
"""


class Solution(object):
    def magicalString(self, n):
        """
        暴力 用来找规律
        似乎没循环
        :type n: int
        :rtype: int
        """
        s = ["1"] * n
        i, j = 0, 0
        while i + 1 < n:
            if s[j] == '1':
                if s[i] == '1':
                    s[i + 1] = '2'
                else:
                    s[i + 1] = '1'
                i += 1
                j += 1
            else:
                if s[i] != s[i - 1]:
                    s[i + 1] = s[i]
                    i += 1
                else:
                    if s[i] == '1':
                        s[i + 1] = '2'
                    else:
                        s[i + 1] = '1'
                    i += 1
                    j += 1
        # return ''.join(s)
        return s.count('1')

    def magicalString2(self, n):
        """
        精简代码 没优化时间复杂度和空间复杂度
        :param n:
        :return:
        """
        S = [1,2,2]
        idx = 2
        while len(S) < n:
            S += S[idx] * [(3 - S[-1])]
            idx += 1
        return S[:n].count(1)

s = Solution()
n = 10
print(s.magicalString(n))
for i in range(1,1000):
    print(i, s.magicalString(i))
