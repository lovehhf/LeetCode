# -*- coding:utf-8 -*-

__author__ = 'huanghf'

"""
UTF-8 中的一个字符可能的长度为 1 到 4 字节，遵循以下的规则：

对于 1 字节的字符，字节的第一位设为0，后面7位为这个符号的unicode码。
对于 n 字节的字符 (n > 1)，第一个字节的前 n 位都设为1，第 n+1 位设为0，后面字节的前两位一律设为10。
剩下的没有提及的二进制位，全部为这个符号的unicode码。

这是 UTF-8 编码的工作方式：

   Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+---------------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
给定一个表示数据的整数数组，返回它是否为有效的 utf-8 编码。

注意:
输入是整数数组。只有每个整数的最低 8 个有效位用来存储数据。这意味着每个整数只表示 1 字节的数据。

示例 1:
data = [197, 130, 1], 表示 8 位的序列: 11000101 10000010 00000001.

返回 true 。
这是有效的 utf-8 编码，为一个2字节字符，跟着一个1字节字符。

示例 2:
data = [235, 140, 4], 表示 8 位的序列: 11101011 10001100 00000100.

返回 false 。
前 3 位都是 1 ，第 4 位为 0 表示它是一个3字节字符。
下一个字节是开头为 10 的延续字节，这是正确的。
但第二个延续字节不以 10 开头，所以是不符合规则的。
"""


class Solution(object):
    def validUtf8(self, data):
        """
        :type data: List[int]
        :rtype: bool
        """
        n = len(data)
        i = 0
        # while i < n:
        #     if 0 <= data[i] < 128:
        #         i += 1
        #     elif i + 1 < n and 0b1100000 <= data[i] < 0b11100000 and 0b10000000 <= data[i + 1] < 0b11000000:
        #         i += 2
        #     elif i + 2 < n and 0b11100000 <= data[i] < 0b11110000 and 0b10000000 <= data[i + 1] < 0b11000000 and 0b10000000 <= data[i + 2] < 0b11000000:
        #         i += 3
        #     elif i + 3 < n and 0b11110000 <= data[i] < 0b11111000 and 0b10000000 <= data[i + 1] < 0b11000000 and 0b10000000 <= data[i + 2] < 0b11000000 and 0b10000000 <= data[i + 3] < 0b11000000:
        #         i += 4
        #     else:
        #         return False
        while i < n:
            if 0 <= data[i] < 128:
                i += 1
            elif i + 1 < n and 96 <= data[i] < 224 and 128 <= data[i + 1] < 192:
                i += 2
            elif i + 2 < n and 224 <= data[i] < 240 and 128 <= data[i + 1] < 192 and 128 <= data[i + 2] < 192:
                i += 3
            elif i + 3 < n and 240 <= data[i] < 248 and 128 <= data[i + 1] < 192 and 128 <= data[i + 2] < 192 and 128 <= data[i + 3] < 192:
                i += 4
            else:
                return False
        return True


data = [194,155,231,184,185,246,176,131,161,222,174,227,162,134,241,154,168,185,218,178,229,187,139,246,178,187,139,204,146,225,148,179,245,139,172,134,193,156,233,131,154,240,166,188,190,216,150,230,145,144,240,167,140,163,221,190,238,168,139,241,154,159,164,199,170,224,173,140,244,182,143,134,206,181,227,172,141,241,146,159,170,202,134,230,142,163,244,172,140,191]
s = Solution()
print(s.validUtf8(data))
