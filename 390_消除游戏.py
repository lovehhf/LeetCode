# -*- coding:utf-8 -*-

__author__ = 'huanghf'

"""
给定一个从1 到 n 排序的整数列表。
首先，从左到右，从第一个数字开始，每隔一个数字进行删除，直到列表的末尾。
第二步，在剩下的数字中，从右到左，从倒数第一个数字开始，每隔一个数字进行删除，直到列表开头。
我们不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。
返回长度为 n 的列表中，最后剩下的数字。

示例：

输入:
n = 9,
1 2 3 4 5 6 7 8 9
2 4 6 8
2 6
6

输出:
6

1 2 3 4 5 6 7 8
2 4 6 8
2 6
6


找规律
第1次：50个元素: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]
第2次：25个元素: [2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 98]
第3次：12个元素: [6, 14, 22, 30, 38, 46, 54, 62, 70, 78, 86, 94]
第4次：6个元素: [6, 22, 38, 54, 70, 86]
第5次：3个元素: [22, 54, 86]
第6次：1个元素: [54]

第0次: 1开始 100个元素 元素间隔:1 
第1次: 2(1+1)开始 50（100/2）个元素 元素间隔:2
第2次: 上次的元素个数是偶数, 头元素还是2，元素间隔4,25个元素
第3次: 头元素2+4=6,25//2个元素 元素间隔4*2
...
"""


class Solution(object):
    def lastRemaining(self, n):
        """
        找规律
        nums: [头元素,元素之间间隔,元素个数]
        :param n:
        :return:
        """
        c = 1
        nums = [1, 1, n]
        while nums[2] > 1:
            a, b, n = nums
            if c & 1:
                nums = [a + b, b * 2, n >> 1]
            else:
                if nums[2] & 1:
                    nums = [a + b, b * 2, n >> 1]
                else:
                    nums = [a, b * 2, n >> 1]
            c += 1
        return nums[0]

    def lastRemaining2(self, n):
        """
        暴力, 爆内存
        :type n: int
        :rtype: int
        """
        nums = list(range(1, n + 1))
        c = 1
        while len(nums) > 1:
            if c & 1:
                nums = nums[1::2]
            else:
                if len(nums) & 1:
                    nums = nums[1::2]
                else:
                    nums = nums[::2]
            print("第%s次：%s个元素:" % (c, len(nums)), nums)
            c += 1
        return nums[0]


n = 100
s = Solution()
print(s.lastRemaining(n))
print(s.lastRemaining2(n))

# for i in range(1,20):
#     print(i, s.lastRemaining(i))
